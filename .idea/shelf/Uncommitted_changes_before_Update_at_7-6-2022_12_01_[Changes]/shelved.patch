Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.8 (Data-Intelligence-Challenge-main)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 06a1b849f2eedb3214117342bf3ab0b54ad159cf)
+++ b/.idea/misc.xml	(date 1654091743081)
@@ -1,4 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (Data-Intelligence-Challenge-main)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (Data-Intelligence-Challenge-Group-17)" project-jdk-type="Python SDK" />
+  <component name="PyCharmProfessionalAdvertiser">
+    <option name="shown" value="true" />
+  </component>
 </project>
\ No newline at end of file
Index: Discrete-Simulations/robot_configs/policy_iter_hive.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Discrete-Simulations/robot_configs/policy_iter_hive.py b/Discrete-Simulations/robot_configs/policy_iter_hive.py
new file mode 100644
--- /dev/null	(date 1654595973444)
+++ b/Discrete-Simulations/robot_configs/policy_iter_hive.py	(date 1654595973444)
@@ -0,0 +1,165 @@
+import random
+import numpy as np
+
+max_iter = 100
+discount = 0.5
+other_robot_value = -1.0
+
+
+def calculate_policies(robots):
+    # Initialisation
+    grid = robots[0].grid
+
+    # Fix rewards for all robots. For each robot, the tiles on which
+    # the other robots are chilling get a negative score
+    all_rewards = []
+    rewards = {}
+
+    cell_rewards = grid.cells.copy()
+
+    # Create rewards based on the whole grid, as usual
+    for i in range(0, grid.n_cols):
+        for j in range(0, grid.n_rows):
+            rewards[(i,j)] = cell_rewards[i,j]
+
+    # But now, for each robot, we will create their own rewards data structure.
+    # The difference is that for robot x, all other robots (and their surroundings)
+    # will get certain values on the grid, to ensure they avoid each other.
+    for robot_i, robot in enumerate(robots): # Current robot
+        all_rewards.append(rewards.copy())
+        for robot_j, other_robot in enumerate(robots): # Other robot
+            if robot_i != robot_j: # Only do something if they are not the same
+                other_robot_i, other_robot_j = other_robot.pos
+                # Give the whole 3x3 grid surrounding the other robot
+                # a punishing value
+                for neighbour_i in range(other_robot_i-1, other_robot_i+2):
+                    for neighbour_j in range(other_robot_j-1, other_robot_j+2):
+                        all_rewards[robot_i][(neighbour_i,neighbour_j)] = other_robot_value
+
+    # Define a central actions dictionary that indicates what all
+    # the possible actions are on the grid. Same for every robot
+    actions = {}
+    for i in range(0, grid.n_cols):
+        for j in range(0, grid.n_rows):
+            possible_actions = get_possible_actions(grid, (i, j))
+            # Ensure only keys get added when there are actions
+            if len(possible_actions) != 0:
+                actions[(i, j)] = possible_actions
+
+    # Define an initial policy for each robot
+    policies = []
+
+    # Define the random policy for a robot as usual
+    for _ in robots:
+        policy = {}
+        for s in actions.keys():
+            try:
+                policy[s] = np.random.choice(actions[s])
+            except: pass
+        policies.append(policy)
+
+    all_values = all_rewards.copy()
+    # Policy iteration, but now takes all robots into account
+    policies = policy_iteration(robots, policies, all_values, all_rewards, actions)
+
+    return policies
+
+
+def policy_iteration(robots, policies, all_values, all_rewards, actions):
+    '''
+    Policy iteration, where we go over all the robots.
+    '''
+    for i, robot in enumerate(robots):
+        policy, values, rewards = policies[i].copy(), all_values[i].copy(), all_rewards[i].copy()
+        for _ in range(max_iter):
+            policy_prev = policy.copy()
+            values = policy_evaluation(robot, policy, values, rewards)
+
+            policy = policy_improvement(robot, policy, values, rewards, actions)
+            policies[i] = policy
+
+            # Early stopping
+            if policy_prev == policy:
+                #print('stopped early convergence (main)')
+                break
+    return policies
+
+
+def policy_evaluation(robot, policy, values, rewards):
+    '''
+    Evaluation of policy
+
+    Input:
+    robot - a Robot object used to interact with the environment
+    '''
+    for _ in range(max_iter):
+        V_prev = values.copy()
+        # Calculate weighted score of state after each possible action
+        for s in policy.keys():
+            a = policy[s]
+            values[s] = rewards[s] + discount * V_prev[get_next_state(s, a)]
+        # Early stopping
+        if V_prev == values:
+            #print('stopped early convergence (eval)')
+            break
+    return values
+
+
+def policy_improvement(robot, policy, values, rewards, actions):
+    '''
+    Improvement update pass in policy
+
+    Input:
+    robot - a Robot object used to interact with the environment
+    '''
+    # Calculate Q value
+    Q = {}
+    # Calculate weighted score of each possible action
+    for i in range(robot.grid.n_cols):
+        for j in range(robot.grid.n_rows):
+            s = (i,j)
+            Q = {}
+            try:
+                for a in actions[s]:
+                    Q[a] = rewards[s] + discount * values[get_next_state(s, a)]
+                try:
+                    policy[s] = max(Q, key=Q.get)
+                except: pass
+            except: pass
+    return policy
+
+
+def get_next_state(s, a):
+    if a == 'e':
+        try: return (s[0]+1, s[1])
+        except IndexError: return (s[0], s[1])
+    if a == 's':
+        try: return (s[0], s[1]+1)
+        except IndexError: return (s[0], s[1])
+    if a == 'w':
+        try: return (s[0]-1, s[1])
+        except IndexError: return (s[0], s[1])
+    if a == 'n':
+        try: return (s[0], s[1]-1)
+        except IndexError: return (s[0], s[1]) 
+
+
+def get_possible_actions(grid, s):
+    possible_actions = []
+    try:
+        if grid.cells[s[0]+1, s[1]] >= 0:
+            possible_actions.append("e")
+    except IndexError: pass
+    try:
+        if grid.cells[s[0], s[1]+1] >= 0:
+            possible_actions.append("s")
+    except IndexError: pass
+    try:
+        if grid.cells[s[0]-1, s[1]] >= 0:
+            possible_actions.append("w")
+    except IndexError: pass
+    try:
+        if grid.cells[s[0], s[1]-1] >= 0:
+            possible_actions.append("n")
+    except IndexError: pass
+    return possible_actions
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"d1f1c33a-7b21-46e2-9005-2408b963b11d\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/Discrete-Simulations/__init__.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Discrete-Simulations/robot_configs/other/__init__.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Discrete-Simulations/Experiments2.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Discrete-Simulations/Experiments2.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Discrete-Simulations/experiments.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Discrete-Simulations/experiments.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Discrete-Simulations/grid_configs/AAAAdeath.grid\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Discrete-Simulations/grid_configs/death.grid\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Discrete-Simulations/robot_configs/greedy_robot.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Discrete-Simulations/robot_configs/other/greedy_robot.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Discrete-Simulations/robot_configs/infinite_view_robot.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Discrete-Simulations/robot_configs/other/infinite_view_robot.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Discrete-Simulations/robot_configs/rotatorinator.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Discrete-Simulations/robot_configs/other/rotatorinator.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"FlaskConsoleOptions\" custom-start-script=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\">\r\n    <envs>\r\n      <env key=\"FLASK_APP\" value=\"app\" />\r\n    </envs>\r\n    <option name=\"myCustomStartScript\" value=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\" />\r\n    <option name=\"myEnvs\">\r\n      <map>\r\n        <entry key=\"FLASK_APP\" value=\"app\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"28hA7Cz9SaEul11W26ej3BnrD2q\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/Discrete-Simulations/robot_configs\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"editor.preferences.fonts.default\" />\r\n  </component>\r\n  <component name=\"ReaderModeSettings\">\r\n    <option name=\"showLigatures\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/Discrete-Simulations/robot_configs\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/Discrete-Simulations/robot_configs/other\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"app\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Data-Intelligence-Challenge-Group-17\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/Discrete-Simulations\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Discrete-Simulations/app.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.app\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"d1f1c33a-7b21-46e2-9005-2408b963b11d\" name=\"Changes\" comment=\"\" />\r\n      <created>1651658275211</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1651658275211</updated>\r\n      <workItem from=\"1651658276576\" duration=\"1063000\" />\r\n      <workItem from=\"1651667238245\" duration=\"167000\" />\r\n      <workItem from=\"1651667415931\" duration=\"3957000\" />\r\n      <workItem from=\"1651836896431\" duration=\"9439000\" />\r\n      <workItem from=\"1652270357557\" duration=\"2627000\" />\r\n      <workItem from=\"1652354541299\" duration=\"11528000\" />\r\n      <workItem from=\"1652454366479\" duration=\"2688000\" />\r\n      <workItem from=\"1652801250972\" duration=\"601000\" />\r\n      <workItem from=\"1652875638084\" duration=\"2805000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/Data_Intelligence_Challenge_Group_17$app.coverage\" NAME=\"app Coverage Results\" MODIFIED=\"1651838964795\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/Discrete-Simulations\" />\r\n    <SUITE FILE_PATH=\"coverage/GroupAssignment$experiments.coverage\" NAME=\"experiments Coverage Results\" MODIFIED=\"1652875964057\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/Discrete-Simulations\" />\r\n    <SUITE FILE_PATH=\"coverage/GroupAssignment$app.coverage\" NAME=\"app Coverage Results\" MODIFIED=\"1652876283062\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/Discrete-Simulations\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 06a1b849f2eedb3214117342bf3ab0b54ad159cf)
+++ b/.idea/workspace.xml	(date 1654592956359)
@@ -1,15 +1,17 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
   <component name="ChangeListManager">
     <list default="true" id="d1f1c33a-7b21-46e2-9005-2408b963b11d" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/Discrete-Simulations/__init__.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Discrete-Simulations/robot_configs/other/__init__.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Discrete-Simulations/Experiments2.py" beforeDir="false" afterPath="$PROJECT_DIR$/Discrete-Simulations/Experiments2.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Discrete-Simulations/experiments.py" beforeDir="false" afterPath="$PROJECT_DIR$/Discrete-Simulations/experiments.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Discrete-Simulations/grid_configs/AAAAdeath.grid" beforeDir="false" afterPath="$PROJECT_DIR$/Discrete-Simulations/grid_configs/death.grid" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Discrete-Simulations/robot_configs/greedy_robot.py" beforeDir="false" afterPath="$PROJECT_DIR$/Discrete-Simulations/robot_configs/other/greedy_robot.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Discrete-Simulations/robot_configs/infinite_view_robot.py" beforeDir="false" afterPath="$PROJECT_DIR$/Discrete-Simulations/robot_configs/other/infinite_view_robot.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Discrete-Simulations/robot_configs/rotatorinator.py" beforeDir="false" afterPath="$PROJECT_DIR$/Discrete-Simulations/robot_configs/other/rotatorinator.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Discrete-Simulations/app_hive.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Discrete-Simulations/robot_configs/policy_iter_hive.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Discrete-Simulations/robot_configs/policy_iter_unit.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/Data-Intelligence-Challenge-Group-17.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/Data-Intelligence-Challenge-Group-17.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Discrete-Simulations/robot_configs/policy_iteration_robot.py" beforeDir="false" afterPath="$PROJECT_DIR$/Discrete-Simulations/robot_configs/policy_iteration_robot.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -61,20 +63,19 @@
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="WebServerToolWindowFactoryState" value="false" />
     <property name="last_opened_file_path" value="$PROJECT_DIR$/Discrete-Simulations/robot_configs" />
-    <property name="settings.editor.selected.configurable" value="editor.preferences.fonts.default" />
-  </component>
-  <component name="ReaderModeSettings">
-    <option name="showLigatures" value="true" />
+    <property name="settings.editor.selected.configurable" value="com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable" />
   </component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
+      <recent name="C:\Users\HP\Desktop\Uni\4. Data Intelligence Challenge\Data-Intelligence-Challenge-Group-17\Discrete-Simulations\robot_configs" />
+      <recent name="C:\Users\HP\Desktop\Uni\4. Data Intelligence Challenge\Data-Intelligence-Challenge-Group-17\Discrete-Simulations" />
       <recent name="$PROJECT_DIR$/Discrete-Simulations/robot_configs" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
       <recent name="$PROJECT_DIR$/Discrete-Simulations/robot_configs/other" />
     </key>
   </component>
-  <component name="RunManager">
+  <component name="RunManager" selected="Python.app_hive">
     <configuration name="app" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="Data-Intelligence-Challenge-Group-17" />
       <option name="INTERPRETER_OPTIONS" value="" />
@@ -89,6 +90,27 @@
       <option name="ADD_SOURCE_ROOTS" value="true" />
       <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
       <option name="SCRIPT_NAME" value="$PROJECT_DIR$/Discrete-Simulations/app.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
+    <configuration name="app_hive" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+      <module name="Data-Intelligence-Challenge-Group-17" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/Discrete-Simulations" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/Discrete-Simulations/app_hive.py" />
       <option name="PARAMETERS" value="" />
       <option name="SHOW_COMMAND_LINE" value="false" />
       <option name="EMULATE_TERMINAL" value="false" />
@@ -99,6 +121,7 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Python.app_hive" />
         <item itemvalue="Python.app" />
       </list>
     </recent_temporary>
@@ -136,10 +159,6 @@
         </entry>
       </map>
     </option>
-  </component>
-  <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/Data_Intelligence_Challenge_Group_17$app.coverage" NAME="app Coverage Results" MODIFIED="1651838964795" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/Discrete-Simulations" />
-    <SUITE FILE_PATH="coverage/GroupAssignment$experiments.coverage" NAME="experiments Coverage Results" MODIFIED="1652875964057" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/Discrete-Simulations" />
-    <SUITE FILE_PATH="coverage/GroupAssignment$app.coverage" NAME="app Coverage Results" MODIFIED="1652876283062" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/Discrete-Simulations" />
+    <option name="oldMeFiltersMigrated" value="true" />
   </component>
 </project>
\ No newline at end of file
Index: Discrete-Simulations/app_hive.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Discrete-Simulations/app_hive.py b/Discrete-Simulations/app_hive.py
new file mode 100644
--- /dev/null	(date 1654595749911)
+++ b/Discrete-Simulations/app_hive.py	(date 1654595749911)
@@ -0,0 +1,235 @@
+# Imports:
+from flask import Flask, render_template, request, jsonify
+from engineio.payload import Payload
+
+# Increase limit to not drop too many packets:
+Payload.max_decode_packets = 1000
+import random
+from flask_socketio import SocketIO
+import base64
+import numpy as np
+from io import BytesIO
+from flask_socketio import emit
+import pickle
+import os
+import ast
+from matplotlib.figure import Figure
+from environment import Grid, Robot
+# Import all robot algorithms present in the robot_configs folder:
+from robot_configs import *
+
+app = Flask(__name__)
+app.config['SECRET_KEY'] = 'secret!'
+socketio = SocketIO(app)
+
+grid, robots = None, None
+occupied = False
+PATH = os.getcwd()
+
+
+def draw_grid(grid):
+    """'Helper function for creating a JSON payload which will be displayed in the browser."""
+    global robots
+    materials = {0: 'cell_clean', -1: 'cell_wall', -2: 'cell_obstacle', -3: 'cell_robot_n', -4: 'cell_robot_e',
+                 -5: 'cell_robot_s', -6: 'cell_robot_w', 1: 'cell_dirty', 2: 'cell_goal', 3: 'cell_death'}
+    # Setting statistics:
+    clean = (grid.cells == 0).sum()
+    dirty = (grid.cells >= 1).sum()
+    goal = (grid.cells == 2).sum()
+    if robots:  # If we have robots on the grid:
+        efficiencies = [100 for i in range(len(robots))]
+        batteries = [100 for i in range(len(robots))]
+        alives = [True for i in range(len(robots))]
+        for i, robot in enumerate(robots):
+            # Calculating efficiency:
+            moves = [(x, y) for (x, y) in zip(robot.history[0], robot.history[1])]
+            if len(moves) > 0:
+                u_moves = set(moves)
+                n_revisted_tiles = len(moves) - len(u_moves)
+                n_total_tiles = (grid.cells >= 0).sum()
+                efficiency = (100 * n_total_tiles) / (n_total_tiles + n_revisted_tiles)
+                efficiencies[i] = float(round(efficiency, 2))
+            # Min battery level is 0:
+            battery = 0 if robot.battery_lvl < 0 else robot.battery_lvl
+            # Battery and alive stats:
+            batteries[i] = round(battery, 2)
+            alives[i] = robot.alive
+        return {'grid': render_template('grid.html', height=30, width=30, n_rows=grid.n_rows, n_cols=grid.n_cols,
+                                        room_config=grid.cells,
+                                        materials=materials), 'clean': round((clean / (dirty + clean)) * 100, 2),
+                'goal': float(goal), 'efficiency': ','.join([str(i) for i in efficiencies]),
+                'battery': ','.join([str(i) for i in batteries]),
+                'alive': alives}
+    else:  # If we have an empty grid with no robots:
+        return {'grid': render_template('grid.html', height=30, width=30, n_rows=grid.n_rows, n_cols=grid.n_cols,
+                                        room_config=grid.cells,
+                                        materials=materials), 'clean': round((clean / (dirty + clean)) * 100, 2),
+                'goal': float(goal), 'efficiency': ',', 'battery': ',',
+                'alive': ','}
+
+
+# Routes:
+
+@app.route('/')
+def home():
+    return render_template('home_page.html', files=os.listdir(PATH + '/grid_configs'),
+                           rfiles=[i for i in os.listdir(PATH + '/robot_configs') if '__' not in i])
+
+
+@app.route('/editor')
+def editor():
+    return render_template('editor.html')
+
+
+@app.route('/build_grid')
+def build_grid():
+    """Main route for building a grid. Given a request with the following parameters, a grid
+     and accompanying statistics are being constructed.
+     Request params:
+     height: number of rows in the grid.
+     width: number of columns in the grid.
+     obstacles: a list of tuples (x,y) of obstacle locations.
+     goals: a list of tuples (x,y) of goal locations.
+     deaths: a list of tuples (x,y) of death-tile locations.
+     save: boolean (true, false) to save the current grid to a file.
+     name: filename to save the current grid to.
+     """
+    n_rows = int(request.args.get('height'))
+    n_cols = int(request.args.get('width'))
+    obstacles = ast.literal_eval(request.args.get('obstacles'))
+    goals = ast.literal_eval(request.args.get('goals'))
+    deaths = ast.literal_eval(request.args.get('deaths'))
+    to_save = False if request.args.get('save') == 'false' else True
+    name = str(request.args.get('name'))
+    grid = Grid(n_cols, n_rows)
+    for (x, y) in obstacles:
+        grid.put_singular_obstacle(x, y)
+    for (x, y) in goals:
+        grid.put_singular_goal(x, y)
+    for (x, y) in deaths:
+        grid.put_singular_death(x, y)
+    if to_save and len(name) > 0:
+        pickle.dump(grid, open(f'{PATH}/grid_configs/{name}.grid', 'wb'))
+        return {'grid': '', 'success': 'true'}
+    return draw_grid(grid)
+
+
+@app.route('/get_history')
+def get_history():
+    """Returns a plot of the history."""
+    global robots
+    if robots:
+        fig = Figure()
+        ax = fig.subplots()
+        for robot in robots:
+            ax.plot(np.array(robot.history[0]) + 0.5, -1 * np.array(robot.history[1]) - 0.5)
+            obstacles = [[], []]
+            for x in range(robot.grid.cells.shape[0]):
+                for y in range(robot.grid.cells.shape[1]):
+                    if (robot.grid.cells[x][y] == -2) or (robot.grid.cells[x][y] == -1):
+                        obstacles[0].extend([x, x + 0.5, None])
+                        obstacles[1].extend([-1 * y, -1 * y - 0.5, None])
+            ax.plot(obstacles[0], obstacles[1])
+            ax.get_xaxis().set_visible(False)
+            ax.get_yaxis().set_visible(False)
+        # Save it to a temporary buffer.
+        buf = BytesIO()
+        fig.savefig(buf, format="png")
+        # Embed the result in the html output.
+        data = base64.b64encode(buf.getbuffer()).decode("ascii")
+        return f"<img src='data:image/png;base64,{data}'/>"
+    return ''
+
+
+# Event handlers:
+
+@socketio.on('get_grid')
+def handle_browser_new_grid(json):
+    """Handles socket event 'get_grid', needs filename of grid config as payload."""
+    global grid
+    global occupied
+    occupied = False
+    with open(f'{PATH}/grid_configs/{json["data"]}', 'rb') as f:
+        grid = pickle.load(f)
+    emit('new_grid', draw_grid(grid))
+
+
+@socketio.on('get_robot')
+def handle_browser_spawn_robot(json):
+    robot_alg = json['robot_file']
+    p_determ = float(json['determ'])
+    x_spawn = json['x_spawns'].split(',')
+    y_spawn = json['y_spawns'].split(',')
+    orient = json['orient']
+    p_drain = float(json['p_drain'])
+    lam_drain = float(json['lam_drain'])
+    vision = int(json['vision'])
+    n_robots = int(json['n_robots'])
+    # Check if selected robot algorithm contains a cheat:
+    # with open(PATH + '/robot_configs/' + robot_alg) as f:
+    #     lines = f.read().split('\n')
+    #     ERRORS = "\n".join(
+    #         [f'Illegal access of grid by robot algorithm in line {i + 1}!\n use possible_tiles_after_move() instead!'
+    #          for i, line in enumerate(lines) if 'grid.cells' in line or 'grid' in line])
+    # if len(ERRORS) > 0:
+    #     print(f'[ERROR]: {ERRORS}')
+    #     ERRORS = ERRORS.replace('\n', '<br>')
+    #     emit('new_grid', {'grid': f'<h1>{ERRORS}</h1>'})
+    # else:
+    global robots
+    global grid
+    try:
+        robots = [Robot(grid, (int(x_spawn[i]), int(y_spawn[i])), orientation=orient, battery_drain_p=p_drain,
+                        battery_drain_lam=lam_drain, p_move=p_determ, vision=vision) for i in range(n_robots)]
+    except IndexError:
+        emit('new_grid', {'grid': '<h1>Invalid robot coordinates entered!</h1>'})
+        print('[ERROR] invalid starting coordinate entered!')
+    except ValueError:
+        emit('new_grid', {'grid': '<h1>Invalid robot coordinates entered, spot on map is not free!</h1>'})
+        print('[ERROR] invalid starting coordinate entered, spot on map is not free!')
+    else:
+        emit('new_grid', draw_grid(grid))
+
+
+@socketio.on('get_update')
+def handle_browser_update(json):
+    global robots
+    global occupied
+    global grid
+    robot_alg = json['robot_file'].split('.py')[0]
+    if not occupied:
+        occupied = True
+
+        """
+        Below, instead of just letting each robot calculate its policy, we let a hive mind do that.
+        This hive mind resembled the policy_iteration_robot, but now calculates multiple policies
+        that do depend on each other. After that, we feed these policies to all the robots on the
+        grid.
+        """
+
+        # Here the hive will calculate one policy per robot, taking into account each
+        # robot's position.
+        policies = policy_iter_hive.calculate_policies(robots)
+
+        # Checking if the selected robot algorithm is indeed imported, if file changed since starting app.py,
+        # throw error.
+        try:
+            for i, robot in enumerate(robots):
+                # Don't update dead robots:
+                if robot.alive:
+                    # Feed a robot its policy and let it make a move:
+                    globals()[robot_alg].robot_epoch(robot, policies[i])
+
+        except KeyError:
+            print(
+                f'[ERROR] restart app.py and make sure the file {robot_alg}.py is present in the robot_configs folder.')
+
+        emit('new_grid', draw_grid(grid))
+        emit('new_plot', get_history())
+        occupied = False
+    else:
+        pass
+
+
+if __name__ == '__main__':
+    socketio.run(app, debug=True)
Index: Discrete-Simulations/robot_configs/policy_iteration_robot.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import random\r\nimport numpy as np\r\n\r\nmax_iter = 100\r\ndiscount = 0.5\r\n\r\ndef robot_epoch(robot):\r\n    # Initialisation\r\n    grid = robot.grid\r\n\r\n    rewards = {}\r\n    for i in range(0, grid.n_cols):\r\n        for j in range(0, grid.n_rows):\r\n            rewards[(i,j)] = grid.cells[i, j]\r\n\r\n    values = rewards.copy()\r\n\r\n    actions = {}\r\n    for i in range(0, grid.n_cols):\r\n        for j in range(0, grid.n_rows):\r\n            possible_actions = get_possible_actions(grid, (i, j))\r\n            # Ensure only keys get added when there are actions\r\n            if len(possible_actions) != 0:\r\n                actions[(i, j)] = possible_actions\r\n            \r\n\r\n    # Define an initial policy\r\n    policy = {}\r\n\r\n    for s in actions.keys():\r\n        try:\r\n            policy[s] = np.random.choice(actions[s])\r\n        except: pass\r\n    # Policy iteration\r\n    policy = policy_iteration(robot, policy, values, rewards, actions)\r\n    # Randomly select where to go based on policy\r\n    best_direction = policy[robot.pos]\r\n    while robot.orientation != best_direction:\r\n        robot.rotate('r')\r\n    robot.move()\r\n    print('moved', best_direction)\r\n\r\n\r\ndef policy_iteration(robot, policy, values, rewards, actions):\r\n    '''\r\n    Policy iteration\r\n\r\n    Input:\r\n    robot - a Robot object used to interact with the environment\r\n    '''\r\n    # print('Policy iteration')\r\n    for _ in range(max_iter):\r\n        policy_prev = policy.copy()\r\n\r\n        values = policy_evaluation(robot, policy, values, rewards)\r\n\r\n        policy = policy_improvement(robot, policy, values, rewards, actions)\r\n\r\n        # Early stopping\r\n        if policy_prev == policy:\r\n            print('stopped early convergence')\r\n            break\r\n    return policy\r\n\r\n\r\ndef policy_evaluation(robot, policy, values, rewards):\r\n    '''\r\n    Evaluation of policy\r\n\r\n    Input:\r\n    robot - a Robot object used to interact with the environment\r\n    '''\r\n    #print('    Policy evaluation')\r\n    for _ in range(max_iter):\r\n        V_prev = values.copy()\r\n        # Calculate weighted score of state after each possible action\r\n        for s in policy.keys():\r\n            a = policy[s]\r\n            values[s] = rewards[s] + discount * V_prev[get_next_state(s, a)] \r\n        # Early stopping\r\n        if V_prev == values:\r\n            print('stopped early convergence')\r\n            break\r\n    return values\r\n\r\n\r\ndef policy_improvement(robot, policy, values, rewards, actions):\r\n    '''\r\n    Improvement update pass in policy\r\n\r\n    Input:\r\n    robot - a Robot object used to interact with the environment\r\n    '''\r\n    # print('    Policy improvement')\r\n    # Calculate Q value\r\n    Q = {}\r\n    # Calculate weighted score of each possible action\r\n    for i in range(robot.grid.n_cols):\r\n        for j in range(robot.grid.n_rows):\r\n            s = (i,j)\r\n            Q = {}\r\n            try:\r\n                for a in actions[s]:\r\n                    Q[a] = rewards[s] + discount * values[get_next_state(s, a)]\r\n                try:\r\n                    policy[s] = max(Q, key=Q.get)\r\n                except: pass\r\n            except: pass\r\n\r\n    return policy\r\n\r\n\r\ndef get_next_state(s, a):\r\n    if a == 'e':\r\n        try: return (s[0]+1, s[1])\r\n        except IndexError: return (s[0], s[1])\r\n    if a == 's':\r\n        try: return (s[0], s[1]+1)\r\n        except IndexError: return (s[0], s[1])\r\n    if a == 'w':\r\n        try: return (s[0]-1, s[1])\r\n        except IndexError: return (s[0], s[1])\r\n    if a == 'n':\r\n        try: return (s[0], s[1]-1)\r\n        except IndexError: return (s[0], s[1]) \r\n\r\ndef get_possible_actions(grid, s):\r\n    possible_actions = []\r\n\r\n    try:\r\n        if grid.cells[s[0]+1, s[1]] >= 0:\r\n            possible_actions.append(\"e\")\r\n    except IndexError: pass\r\n    try:\r\n        if grid.cells[s[0], s[1]+1] >= 0:\r\n            possible_actions.append(\"s\")\r\n    except IndexError: pass\r\n    try:\r\n        if grid.cells[s[0]-1, s[1]] >= 0:\r\n            possible_actions.append(\"w\")\r\n    except IndexError: pass\r\n    try:\r\n        if grid.cells[s[0], s[1]-1] >= 0:\r\n            possible_actions.append(\"n\")\r\n    except IndexError: pass\r\n    return possible_actions
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Discrete-Simulations/robot_configs/policy_iteration_robot.py b/Discrete-Simulations/robot_configs/policy_iteration_robot.py
--- a/Discrete-Simulations/robot_configs/policy_iteration_robot.py	(revision 06a1b849f2eedb3214117342bf3ab0b54ad159cf)
+++ b/Discrete-Simulations/robot_configs/policy_iteration_robot.py	(date 1654592869665)
@@ -11,7 +11,17 @@
     rewards = {}
     for i in range(0, grid.n_cols):
         for j in range(0, grid.n_rows):
-            rewards[(i,j)] = grid.cells[i, j]
+            rewards[(i,j)] = grid.cells[i, j].copy()
+
+    #print(f'rewards: {rewards}')
+
+    print(f'\t\t 0 \t\t 1 \t\t 2 \t\t 3 \t\t 4 \t\t 5 \t\t 6')
+    for i in range(7):
+        if i in [0, 6]:
+            print(f'{i} | wall \t wall \t wall \t wall \t wall \t wall \t wall \t')
+        else:
+            print(
+                f'{i} | wall \t {rewards[(1, i)]} \t {rewards[(2, i)]} \t {rewards[(3, i)]} \t {rewards[(4, i)]} \t {rewards[(5, i)]} \t wall \t')
 
     values = rewards.copy()
 
@@ -31,6 +41,8 @@
         try:
             policy[s] = np.random.choice(actions[s])
         except: pass
+
+    #print(f'policy: {policy}')
     # Policy iteration
     policy = policy_iteration(robot, policy, values, rewards, actions)
     # Randomly select where to go based on policy
@@ -38,7 +50,7 @@
     while robot.orientation != best_direction:
         robot.rotate('r')
     robot.move()
-    print('moved', best_direction)
+    #print('moved', best_direction)
 
 
 def policy_iteration(robot, policy, values, rewards, actions):
@@ -51,6 +63,7 @@
     # print('Policy iteration')
     for _ in range(max_iter):
         policy_prev = policy.copy()
+        #print(rewards)
 
         values = policy_evaluation(robot, policy, values, rewards)
 
@@ -58,7 +71,7 @@
 
         # Early stopping
         if policy_prev == policy:
-            print('stopped early convergence')
+            print('stopped early convergence (main)')
             break
     return policy
 
@@ -73,13 +86,15 @@
     #print('    Policy evaluation')
     for _ in range(max_iter):
         V_prev = values.copy()
+        #print(f'v_prev: {V_prev}')
         # Calculate weighted score of state after each possible action
         for s in policy.keys():
             a = policy[s]
             values[s] = rewards[s] + discount * V_prev[get_next_state(s, a)] 
         # Early stopping
+        #print(f'values: {values}')
         if V_prev == values:
-            print('stopped early convergence')
+            print('stopped early convergence (eval)')
             break
     return values
 
@@ -107,6 +122,8 @@
                 except: pass
             except: pass
 
+    #print(f'policy after improvement: {policy}')
+
     return policy
 
 
Index: .idea/Data-Intelligence-Challenge-Group-17.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.8 (Data-Intelligence-Challenge-main)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"PyDocumentationSettings\">\r\n    <option name=\"format\" value=\"PLAIN\" />\r\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\r\n  </component>\r\n  <component name=\"TemplatesService\">\r\n    <option name=\"TEMPLATE_CONFIGURATION\" value=\"Jinja2\" />\r\n    <option name=\"TEMPLATE_FOLDERS\">\r\n      <list>\r\n        <option value=\"$MODULE_DIR$/Discrete-Simulations/templates\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Data-Intelligence-Challenge-Group-17.iml b/.idea/Data-Intelligence-Challenge-Group-17.iml
--- a/.idea/Data-Intelligence-Challenge-Group-17.iml	(revision 06a1b849f2eedb3214117342bf3ab0b54ad159cf)
+++ b/.idea/Data-Intelligence-Challenge-Group-17.iml	(date 1654091001493)
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.8 (Data-Intelligence-Challenge-main)" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.8 (Data-Intelligence-Challenge-Group-17)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="PyDocumentationSettings">
Index: Discrete-Simulations/robot_configs/policy_iter_unit.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Discrete-Simulations/robot_configs/policy_iter_unit.py b/Discrete-Simulations/robot_configs/policy_iter_unit.py
new file mode 100644
--- /dev/null	(date 1654595583218)
+++ b/Discrete-Simulations/robot_configs/policy_iter_unit.py	(date 1654595583218)
@@ -0,0 +1,18 @@
+import numpy as np
+
+def robot_epoch(robot, policy):
+    """
+    A robot_epoch function for each actual robot, so that the environment still works.
+    This function basically only picks the best policy for its robot.
+
+    Input:
+    Robot - a Robot class instance
+    Policy - the overall policy for this particular robot
+    """
+    best_direction = policy[robot.pos]
+
+    while robot.orientation != best_direction:
+        robot.rotate('r')
+
+    robot.move()
+    print('moved', best_direction)
\ No newline at end of file
